{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "keyVaultName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Mandatory. Key Vault name"
            }
        },
        "keyVaultAccessPolicies": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Access policies object {\"tenantId\":\"\",\"objectId\":\"\",\"permissions\":{\"keys\":[\"\"],\"secrets\":[\"\"]}}"
            }
        },
        "keyVaultLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 30,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs are gonna be kept. If you do not want to apply any retention policy and retain data forever, set value to 0."
            }
        },
        "keyVaultEnableVaultForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute (VM, Service Fabric, ...)"
            }
        },
        "keyVaultEnableVaultForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Optional. Specifies if the vault is enabled for a template deployment"
            }
        },
        "keyVaultEnableVaultForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
            }
        },
        "keyVaultSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Optional. Specifies the SKU for the vault"
            }
        },
        "keyVaultResourceLock": {
            "type": "string",
            "allowedValues": [
                "None",
                "CanNotDelete"
            ],
            "defaultValue": "None"
        },
        "keyVaultLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "keyVaultFirewallIpRules": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Array of IP rules to use for firewall setting"
            }
        },
        "keyVaultFirewallVnets": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Array of full Azure Id's of VNET's to which to attach the Key Vault"
            }
        },
        "sqlAdminLogin": {
            "type": "string",
            "metadata": {
                "description": "Mandatory. Admin user name to use for SQL Server to be deployed"
            }
        },
        "sqlAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Mandatory. Admin password for SQL Server to be provisioned"
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Mandatory. Name of Storage Account to provision"
            }
        },
        "storageContainerName": {
            "type": "string",
            "defaultValue": "eliastestcontainer",
            "metadata": {
                "description": "Mandatory. Name of container to add to Storage Account"
            }
        },
        "storageContainerPublicAccessLevel": {
            "type": "string",
            "defaultValue": "None",
            "metadata": {
                "description": "Optional. Level of public access to storage container."
            }
        },
        "templateStorageUri": {
            "type": "string",
            "metadata": {
                "description": "Mandatory. URI for reference template Storage Account"
            }
        },
        "templateStorageToken": {
            "type": "securestring",
            "metadata": {
                "description": "Mandatory. SAS token for reference template Storage Account"
            }
        }
    },
    "functions": [
        {
            "namespace": "tools",
            "members": {
                //Naming convention function used for naming deployed components
                "uniqueName": {
                    "parameters": [
                        {
                            //Name of component to use
                            "name": "componentName",
                            "type": "string"                        
                        },
                        {
                            //Maximum length of component name
                            "name": "maxLength",
                            "type": "int"
                        }
                    ],
                    "output": {
                        //Return name with component name part and padding of unique string to fill remaining space
                        "type": "string",
                        "value": "[concat(toLower(parameters('componentName')), take(uniqueString(subscription().id, resourceGroup().id), sub(parameters('maxLength'), length(uniqueString(subscription().id, resourceGroup().id)))))]"
                    }
                }
            }
        }
    ],
    "variables": {
        "uniqueString": "[uniqueString(subscription().id, resourceGroup().id)]"
    },
    "resources": [
        {
            "comments": "Deploy Storage Account",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "StorageAccount",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateStorageUri'), '/', 'common-storage-account.json', parameters('templateStorageToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": {
                        "value": "[tools.uniqueName('asa', 24)]"
                    }
                }
            }
        },
        {
            "comments": "Deploy blob container to existing Storage Account (storage account name given as parameter)",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "StorageContainer",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateStorageUri'), '/', 'common-storage-blobcontainer.json', parameters('templateStorageToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": {
                        "value": "[tools.uniqueName('blob', 24)]"
                    },
                    "storageAccountName": {
                        "value": "[reference('StorageAccount').outputs.storageAccountName.value]"
                    }
                }
            }
        },
        {
            "comments": "Deploy Key Vault",
            "name": "keyVault",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateStorageUri'), '/', 'common-sql-server.json', parameters('templateStorageToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": "[tools.uniqueName('akv', 24)]",
                    "accessPolicies": "[parameters('keyVaultAccessPolicies')]",
                    "logsRetentionInDays": "[parameters('keyVaultLogsRetentionInDays')]",
                    "enableVaultForDeployment": "[parameters('keyVaultEnableVaultForDeployment')]",
                    "enableVaultForTemplateDeployment": "[parameters('keyVaultEnableVaultForTemplateDeployment')]",
                    "enableVaultForDiskEncryption": "[parameters('keyVaultEnableVaultForDiskEncryption')]",
                    "vaultSku": "[parameters('keyVaultSku')]",
                    "resourceLocks": "[parameters('keyVaultResourceLock')]",
                    "location": "[parameters('keyVaultLocation')]",
                    "firewallIpRules": "[parameters('keyVaultFirewallIpRules')]",
                    "firewallVnets": "[parameters('keyVaultFirewallVnets')]",
                    "diagnosticStorageAccountId": "[reference('StorageAccount').outputs.storageAccountId.value]"
                }
            }
        },
        //TO ADD: Key Vault Secret - SQL Server Admin password
        {
            "comments": "Deploy SQL Server",
            "name": "sqlServer",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateStorageUri'), '/', 'common-sql-server.json', parameters('templateStorageToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": {
                        "value": "eliastestsqlserv"
                    },
                    "sqlAdminLogin": {
                        "value": "[parameters('sqlAdminLogin')]"
                    },
                    "sqlAdminPassword": {
                        "value": "[parameters('sqlAdminPassword')]"
                    }
                }
            }
        },
        {
            "comments": "Deploy SQL Database into the SQL Server created previously",
            "name": "sqlDb",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateStorageUri'), '/', 'common-sql-db.json', parameters('templateStorageToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceName": {
                        "value": "testsqldb"
                    },
                    "serverName": {
                        "value": "[reference('sqlServer').outputs.sqlServerName.value]"
                    }
                }
            }
        }
        // Data Lake Store
        // Data Lake Analytics
        // Data Factory V2
        // Data Factory V2 - Linked Services for all relevant components
        // Data Factory V2 - Dataset example
        // Data Factory V2 - Pipeline example
        // Data Warehouse
    ],
    "outputs": {}
}